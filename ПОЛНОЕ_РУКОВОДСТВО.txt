═══════════════════════════════════════════════════════════════════════════
  📚 ПОЛНОЕ РУКОВОДСТВО ПО ЗАПУСКУ И ИСПОЛЬЗОВАНИЮ
  ПЛАТФОРМА ДЛЯ ПОИСКА ЛЮДЕЙ
═══════════════════════════════════════════════════════════════════════════


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  📖 СОДЕРЖАНИЕ                                                          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

1. О проекте
2. Быстрый старт (один шаг!)
3. Способы запуска
   3.1. С Docker (автоматическое создание пользователей)
   3.2. Без Docker (прямой запуск)
   3.3. Ручной запуск (backend + frontend отдельно)
4. Тестовые аккаунты
5. Архитектура проекта
6. Backend (FastAPI)
7. Frontend (React)
8. База данных
9. Тестирование функций
10. Решение проблем
11. Команды управления


═══════════════════════════════════════════════════════════════════════════
  1. О ПРОЕКТЕ
═══════════════════════════════════════════════════════════════════════════

ПЛАТФОРМА ДЛЯ ПОИСКА ЛЮДЕЙ - универсальное приложение для поиска людей
для различных целей: дружба, совместные проекты, работа, обучение.

КЛЮЧЕВЫЕ ОСОБЕННОСТИ:
✅ Детальные профили пользователей с интересами и навыками
✅ Машинное обучение для расчета совместимости
✅ AI-поиск на естественном языке
✅ Продвинутая фильтрация и рекомендации
✅ Система лайков и взаимных match'ей
✅ Встроенный мессенджер
✅ Аналитика и визуализация данных
✅ Мультиязычность (English, Русский, Deutsch)

ТЕХНОЛОГИИ:
• Backend: Python 3.11, FastAPI, SQLAlchemy, PostgreSQL, Redis
• Frontend: React 18, React Router, Axios
• ML: Scikit-learn для расчета совместимости
• Аутентификация: JWT токены
• Контейнеризация: Docker, Docker Compose
• Web-сервер: Nginx


═══════════════════════════════════════════════════════════════════════════
  2. БЫСТРЫЙ СТАРТ (ОДИН ШАГ!) 🚀
═══════════════════════════════════════════════════════════════════════════

САМЫЙ ПРОСТОЙ СПОСОБ ЗАПУСТИТЬ ПРИЛОЖЕНИЕ:

┌─────────────────────────────────────────────────────────────────────────┐
│ СКОПИРУЙТЕ И ВЫПОЛНИТЕ В ТЕРМИНАЛЕ:                                    │
└─────────────────────────────────────────────────────────────────────────┘

cd /home/"user"/Downloads/people-search-platform22
./clean-and-start.sh


ЧТО ПРОИЗОЙДЕТ АВТОМАТИЧЕСКИ:
✅ Освободятся порты 3000, 8000, 80
✅ Остановятся старые Docker контейнеры
✅ Запустится Docker Compose
✅ Соберутся образы backend и frontend
✅ Запустится PostgreSQL база данных
✅ Запустится Redis
✅ Создадутся таблицы в БД
✅ АВТОМАТИЧЕСКИ СОЗДАДУТСЯ 10 ТЕСТОВЫХ ПОЛЬЗОВАТЕЛЕЙ
✅ Запустится FastAPI (backend на порту 8000)
✅ Запустится React (frontend на порту 3000)
✅ Запустится Nginx (порт 80)

⏱️  ВРЕМЯ ЗАПУСКА: 2-3 минуты (первый раз 5-7 минут)

🌐 ОТКРОЙТЕ В БРАУЗЕРЕ: http://localhost

📧 ВОЙДИТЕ:
   Email: john.doe@example.com
   Password: password123


═══════════════════════════════════════════════════════════════════════════
  3. СПОСОБЫ ЗАПУСКА
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ 3.1. С DOCKER (РЕКОМЕНДУЕТСЯ) ⭐                                       │
└─────────────────────────────────────────────────────────────────────────┘

ПРЕИМУЩЕСТВА:
✅ Автоматическое создание 10 тестовых пользователей
✅ Изолированная среда выполнения
✅ PostgreSQL + Redis включены
✅ Nginx для production-like окружения
✅ Легкое масштабирование

КОМАНДА ЗАПУСКА:

cd /home/"user"/Downloads/people-search-platform22
./clean-and-start.sh

ИЛИ ВРУЧНУЮ:

# Остановить старые контейнеры
docker-compose down

# Освободить порты (если заняты)
sudo fuser -k 3000/tcp
sudo fuser -k 8000/tcp
sudo fuser -k 80/tcp

# Запустить
docker-compose up --build

ДОСТУП:
• Frontend: http://localhost (через Nginx)
• Backend API: http://localhost:8000
• API Documentation: http://localhost:8000/docs
• PostgreSQL: localhost:5432
• Redis: localhost:6379

ЛОГИ СОЗДАНИЯ ПОЛЬЗОВАТЕЛЕЙ:
При запуске backend вы увидите:

═══════════════════════════════════════════════════════════════
  🚀 Starting Backend Service
═══════════════════════════════════════════════════════════════
📦 Initializing database and creating test users...
🚀 Initializing database...
⏳ Waiting for database... (1/30)
✅ Database connection established
📦 Creating database tables...
✅ Database tables created
🌱 Creating 10 test users...
✅ Created: John Doe (john.doe@example.com)
✅ Created: Jane Smith (jane.smith@example.com)
... (еще 8 пользователей)
🎉 Successfully created 10 test users!
📧 All accounts use password: password123
✅ Database initialization complete!
🚀 Starting FastAPI application...


┌─────────────────────────────────────────────────────────────────────────┐
│ 3.2. БЕЗ DOCKER (ПРЯМОЙ ЗАПУСК)                                        │
└─────────────────────────────────────────────────────────────────────────┘

ПРЕИМУЩЕСТВА:
✅ Быстрый запуск без Docker
✅ Легче отладка
✅ Использует SQLite (проще)
✅ Не требует Docker прав

КОМАНДА ЗАПУСКА:

cd /home/"user"/Downloads/people-search-platform22
./simple-start.sh

ЧТО ПРОИСХОДИТ:
1. Запускается backend с SQLite на порту 8001
2. Запускается frontend на порту 3000
3. Логи сохраняются в backend.log и frontend.log

ДОСТУП:
• Frontend: http://localhost:3000
• Backend API: http://localhost:8001
• API Documentation: http://localhost:8001/docs

СОЗДАНИЕ ТЕСТОВЫХ ПОЛЬЗОВАТЕЛЕЙ:
После запуска, в отдельном терминале:

cd /home/"user"/Downloads/people-search-platform22/backend
export DATABASE_URL="sqlite:///./people_search.db"
python3 create_10_test_users.py


┌─────────────────────────────────────────────────────────────────────────┐
│ 3.3. РУЧНОЙ ЗАПУСК (2 ТЕРМИНАЛА)                                       │
└─────────────────────────────────────────────────────────────────────────┘

Для максимального контроля над процессом.

ТЕРМИНАЛ 1 - BACKEND:

cd /home/"user"/Downloads/people-search-platform22/backend
export DATABASE_URL="sqlite:///./people_search.db"
pip3 install -r requirements.txt
python3 init_db.py  # Создание таблиц
python3 create_10_test_users.py  # Создание пользователей
uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

ТЕРМИНАЛ 2 - FRONTEND:

cd /home/"user"/Downloads/people-search-platform22/frontend
npm install
REACT_APP_API_URL=http://localhost:8001 npm start

ДОСТУП:
• Frontend: http://localhost:3000
• Backend API: http://localhost:8001


═══════════════════════════════════════════════════════════════════════════
  4. ТЕСТОВЫЕ АККАУНТЫ
═══════════════════════════════════════════════════════════════════════════

ПРИ ЗАПУСКЕ С DOCKER - СОЗДАЮТСЯ АВТОМАТИЧЕСКИ!
ПРИ ЗАПУСКЕ БЕЗ DOCKER - ЗАПУСТИТЕ: python3 create_10_test_users.py

🔑 ПАРОЛЬ ДЛЯ ВСЕХ АККАУНТОВ: password123


┌─────────────────────────────────────────────────────────────────────────┐
│ СПИСОК ТЕСТОВЫХ ПОЛЬЗОВАТЕЛЕЙ                                          │
└─────────────────────────────────────────────────────────────────────────┘

1️⃣  john.doe@example.com
    👤 John Doe, 28 лет
    📍 San Francisco, California
    💼 Passionate Software Developer
    🎯 Интересы: Programming, Technology, Gaming, Hiking, AI, Web Development
    🛠️  Навыки: Python, JavaScript, React, Node.js, Machine Learning, Git, Docker
    💭 Ищет: Work partners and friends in technology and entrepreneurship

2️⃣  jane.smith@example.com
    👤 Jane Smith, 25 лет
    📍 New York, New York
    💼 Creative UI/UX Designer & Digital Artist
    🎯 Интересы: Photography, Traveling, Art, Graphic Design, Cooking, Movies
    🛠️  Навыки: Photoshop, Illustrator, Figma, UI/UX Design, Content Creation
    💭 Ищет: Friends for travel and creative collaborations

3️⃣  mike.wilson@example.com
    👤 Mike Wilson, 32 года
    📍 Los Angeles, California
    💼 Fitness Trainer & Entrepreneur
    🎯 Интересы: Weightlifting, Running, Entrepreneurship, Marketing, Hiking
    🛠️  Навыки: Leadership, Project Management, Communication, Public Speaking
    💭 Ищет: Workout partners and business collaborators

4️⃣  sarah.johnson@example.com
    👤 Sarah Johnson, 29 лет
    📍 Chicago, Illinois
    💼 Data Scientist & AI Researcher (PhD)
    🎯 Интересы: Data Science, Research, Reading, AI, Technology, Programming
    🛠️  Навыки: Python, Data Analysis, Machine Learning, SQL, Problem Solving
    💭 Ищет: Data professionals and researchers

5️⃣  alex.brown@example.com
    👤 Alex Brown, 26 лет
    📍 Seattle, Washington
    💼 Professional Musician & Audio Engineer
    🎯 Интересы: Music, Gaming, Movies, Video Editing, Photography, Art
    🛠️  Навыки: Music Production, Audio Engineering, Sound Design
    💭 Ищет: Musicians and music lovers to collaborate

6️⃣  emma.davis@example.com
    👤 Emma Davis, 27 лет
    📍 Boston, Massachusetts
    💼 Marketing Specialist & Content Strategist
    🎯 Интересы: Marketing, Writing, Yoga, Reading, Photography, Traveling
    🛠️  Навыки: Project Management, Communication, Content Creation, Leadership
    💭 Ищет: Marketing professionals and entrepreneurs

7️⃣  david.martinez@example.com
    👤 David Martinez, 31 год
    📍 Austin, Texas
    💼 Full-stack Developer & Tech Educator
    🎯 Интересы: Programming, Technology, Basketball, Gaming, Teaching
    🛠️  Навыки: JavaScript, React, Node.js, Python, Git, Communication
    💭 Ищет: Developers, educators, and students

8️⃣  olivia.taylor@example.com
    👤 Olivia Taylor, 24 года
    📍 Miami, Florida
    💼 Aspiring Entrepreneur (E-commerce Startup)
    🎯 Интересы: Entrepreneurship, Dancing, Traveling, Reading, Art, Cooking
    🛠️  Навыки: Leadership, Project Management, Problem Solving, Communication
    💭 Ищет: Mentors, co-founders, and fellow entrepreneurs

9️⃣  james.anderson@example.com
    👤 James Anderson, 30 лет
    📍 Denver, Colorado
    💼 Outdoor & Nature Photographer
    🎯 Интересы: Photography, Hiking, Traveling, Art, Gardening, Movies
    🛠️  Навыки: Adobe Photoshop, Content Creation, Problem Solving
    💭 Ищет: Adventure partners and photography collaborators

🔟  sophia.lee@example.com
    👤 Sophia Lee, 26 лет
    📍 Portland, Oregon
    💼 UX Researcher & HCI Specialist (Master's in HCI)
    🎯 Интересы: Technology, Art, Yoga, Reading, Painting, Research
    🛠️  Навыки: UI/UX Design, Figma, Data Analysis, Communication, Leadership
    💭 Ищет: UX professionals, designers, and researchers


═══════════════════════════════════════════════════════════════════════════
  5. АРХИТЕКТУРА ПРОЕКТА
═══════════════════════════════════════════════════════════════════════════

СТРУКТУРА ФАЙЛОВ:

people-search-platform22/
│
├── 📁 backend/                      # BACKEND (FastAPI)
│   ├── 📁 app/                      # Основной код приложения
│   │   ├── main.py                  # Точка входа FastAPI
│   │   ├── models.py                # SQLAlchemy модели БД
│   │   ├── schemas.py               # Pydantic схемы валидации
│   │   ├── database.py              # Настройки подключения к БД
│   │   ├── auth.py                  # JWT аутентификация
│   │   ├── ml_engine.py             # ML алгоритм совместимости
│   │   └── 📁 routers/              # API endpoints
│   │       ├── auth.py              # Регистрация/вход
│   │       ├── users.py             # Управление профилями
│   │       ├── matches.py           # Like/Dislike система
│   │       ├── recommendations.py   # Рекомендации ML
│   │       ├── ai_search.py         # AI поиск
│   │       ├── chat.py              # Мессенджер
│   │       └── analytics.py         # Аналитика
│   │
│   ├── 📁 alembic/                  # Миграции БД
│   ├── init_db.py                   # ⭐ Инициализация БД (Docker)
│   ├── create_10_test_users.py      # ⭐ Создание тестовых пользователей
│   ├── docker-entrypoint.sh         # ⭐ Docker entrypoint скрипт
│   ├── Dockerfile                   # Docker образ backend
│   ├── requirements.txt             # Python зависимости
│   └── 📁 uploads/avatars/          # Аватары пользователей
│
├── 📁 frontend/                     # FRONTEND (React)
│   ├── 📁 src/
│   │   ├── App.js                   # Главный компонент
│   │   ├── 📁 components/           # React компоненты
│   │   │   ├── Login.js             # Страница входа
│   │   │   ├── Register.js          # Страница регистрации
│   │   │   ├── Profile.js           # Профиль пользователя
│   │   │   ├── Recommendations.js   # Рекомендации + Discover
│   │   │   ├── AISearch.js          # AI поиск
│   │   │   ├── UserProfile.js       # Профиль другого пользователя
│   │   │   ├── Chat.js              # Чаты и сообщения
│   │   │   ├── Analytics.js         # Аналитика
│   │   │   └── Navbar.js            # Навигационное меню
│   │   ├── 📁 contexts/
│   │   │   ├── AuthContext.js       # Контекст аутентификации
│   │   │   └── LanguageContext.js   # Мультиязычность
│   │   ├── 📁 config/
│   │   │   └── axios.js             # HTTP клиент
│   │   └── translations.js          # Переводы (EN, RU, DE)
│   ├── Dockerfile                   # Docker образ frontend
│   └── package.json                 # Node.js зависимости
│
├── docker-compose.yml               # ⭐ Docker Compose конфигурация
├── nginx.conf                       # Nginx конфигурация
│
├── 📁 СКРИПТЫ ЗАПУСКА:
│   ├── clean-and-start.sh           # ⭐ Запуск с Docker (рекомендуется)
│   └── simple-start.sh              # ⭐ Запуск без Docker
│
└── 📁 ДОКУМЕНТАЦИЯ:
    ├── ПОЛНОЕ_РУКОВОДСТВО.txt       # ⭐ Полная документация на русском
    └── README.md                    # Краткое описание проекта


КОМПОНЕНТЫ СИСТЕМЫ:

1. FRONTEND (React):
   • Порт: 3000 (прямой) / 80 (через Nginx)
   • Роль: Пользовательский интерфейс
   • Общается с Backend через REST API

2. BACKEND (FastAPI):
   • Порт: 8000 (Docker) / 8001 (без Docker)
   • Роль: Бизнес-логика, API, ML
   • База данных: PostgreSQL (Docker) / SQLite (без Docker)

3. БАЗА ДАННЫХ:
   • PostgreSQL 15 (Docker)
   • SQLite (без Docker)
   • Хранит: пользователи, профили, лайки, сообщения

4. REDIS:
   • Порт: 6379
   • Роль: Кеширование, сессии (только с Docker)

5. NGINX:
   • Порт: 80, 443
   • Роль: Reverse proxy, load balancing (только с Docker)


═══════════════════════════════════════════════════════════════════════════
  6. BACKEND (FastAPI)
═══════════════════════════════════════════════════════════════════════════

ТЕХНОЛОГИИ:
• FastAPI - современный асинхронный веб-фреймворк
• SQLAlchemy - ORM для работы с БД
• Pydantic - валидация данных
• JWT - токены для безопасной аутентификации
• Scikit-learn - машинное обучение
• Uvicorn - ASGI сервер

ОСНОВНЫЕ МОДУЛИ:

┌─────────────────────────────────────────────────────────────────────────┐
│ app/main.py - ГЛАВНЫЙ ФАЙЛ                                              │
└─────────────────────────────────────────────────────────────────────────┘
• Создание FastAPI приложения
• Подключение роутеров
• CORS настройки
• Middleware

┌─────────────────────────────────────────────────────────────────────────┐
│ app/models.py - МОДЕЛИ БАЗЫ ДАННЫХ                                      │
└─────────────────────────────────────────────────────────────────────────┘
• User - пользователи
• Profile - профили пользователей
• Interest - интересы
• Skill - навыки
• Match - лайки и match'и
• Message - сообщения

┌─────────────────────────────────────────────────────────────────────────┐
│ app/auth.py - АУТЕНТИФИКАЦИЯ                                            │
└─────────────────────────────────────────────────────────────────────────┘
• Хеширование паролей (bcrypt)
• Создание JWT токенов
• Проверка токенов
• get_current_user - dependency для защищенных роутов

┌─────────────────────────────────────────────────────────────────────────┐
│ app/ml_engine.py - МАШИННОЕ ОБУЧЕНИЕ                                    │
└─────────────────────────────────────────────────────────────────────────┘
• calculate_compatibility() - расчет совместимости между пользователями
• Учитывает: интересы, навыки, возраст, город, цели
• Возвращает процент совместимости (0-100%)

┌─────────────────────────────────────────────────────────────────────────┐
│ app/routers/ - API ENDPOINTS                                            │
└─────────────────────────────────────────────────────────────────────────┘

auth.py:
• POST /api/auth/register - регистрация нового пользователя
• POST /api/auth/login - вход, получение JWT токена
• GET /api/auth/me - получение текущего пользователя

users.py:
• GET /api/users/profile - получение своего профиля
• PUT /api/users/profile - обновление профиля
• POST /api/users/profile/avatar - загрузка аватара
• POST /api/users/profile/interests - добавление интереса
• POST /api/users/profile/skills - добавление навыка
• GET /api/users/{user_id} - просмотр профиля другого пользователя
• GET /api/interests - список всех интересов
• GET /api/skills - список всех навыков

recommendations.py:
• GET /api/recommendations - получение персонализированных рекомендаций
• POST /api/users/search - поиск с фильтрами (город, возраст, навыки)

ai_search.py:
• POST /api/ai-search - AI поиск на естественном языке
  Примеры запросов:
  - "Find developers in San Francisco"
  - "Looking for designers in New York"
  - "People interested in yoga and fitness"

matches.py:
• POST /api/matches/like/{user_id} - поставить лайк пользователю
• POST /api/matches/dislike/{user_id} - поставить дизлайк
• GET /api/matches - получить список match'ей

chat.py:
• GET /api/messages - получить список чатов
• GET /api/messages/{user_id} - получить сообщения с пользователем
• POST /api/messages/{user_id} - отправить сообщение

analytics.py:
• GET /api/analytics/profile - аналитика своего профиля
• GET /api/analytics/interests - популярные интересы
• GET /api/analytics/skills - популярные навыки

API ДОКУМЕНТАЦИЯ:
При запуске backend доступна интерактивная документация:
• Swagger UI: http://localhost:8000/docs
• ReDoc: http://localhost:8000/redoc


═══════════════════════════════════════════════════════════════════════════
  7. FRONTEND (React)
═══════════════════════════════════════════════════════════════════════════

ТЕХНОЛОГИИ:
• React 18 - UI библиотека
• React Router - маршрутизация
• Axios - HTTP клиент
• React Context - управление состоянием
• Lucide React - иконки
• Recharts - графики и диаграммы

КОМПОНЕНТЫ:

┌─────────────────────────────────────────────────────────────────────────┐
│ Login.js & Register.js - АУТЕНТИФИКАЦИЯ                                │
└─────────────────────────────────────────────────────────────────────────┘
• Формы входа и регистрации
• Валидация полей
• Сохранение JWT токена в localStorage
• Редирект после входа

┌─────────────────────────────────────────────────────────────────────────┐
│ Profile.js - ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ                                       │
└─────────────────────────────────────────────────────────────────────────┘
• Просмотр и редактирование своего профиля
• Загрузка аватара
• Добавление интересов и навыков
• Указание целей поиска

┌─────────────────────────────────────────────────────────────────────────┐
│ Recommendations.js - РЕКОМЕНДАЦИИ И ПОИСК                               │
└─────────────────────────────────────────────────────────────────────────┘
• Две вкладки: Recommendations и Discover
• Recommendations: ML-рекомендации с процентом совместимости
• Discover: Поиск с фильтрами (город, возраст, навыки, интересы)
• Карточки пользователей с кнопкой "View Profile"

┌─────────────────────────────────────────────────────────────────────────┐
│ AISearch.js - AI ПОИСК                                                  │
└─────────────────────────────────────────────────────────────────────────┘
• Поиск на естественном языке
• Примеры запросов:
  - "Find developers in San Francisco"
  - "Looking for designers in New York"
  - "People interested in music and art"
• Результаты с процентом релевантности

┌─────────────────────────────────────────────────────────────────────────┐
│ UserProfile.js - ПРОФИЛЬ ДРУГОГО ПОЛЬЗОВАТЕЛЯ                           │
└─────────────────────────────────────────────────────────────────────────┘
• Просмотр полного профиля
• Кнопки Like / Dislike
• Отображение интересов и навыков
• Аватар и основная информация

┌─────────────────────────────────────────────────────────────────────────┐
│ Chat.js - СООБЩЕНИЯ                                                     │
└─────────────────────────────────────────────────────────────────────────┘
• Список чатов с match'ами
• Переписка с выбранным пользователем
• Отправка сообщений
• Клик по аватару открывает профиль

┌─────────────────────────────────────────────────────────────────────────┐
│ Analytics.js - АНАЛИТИКА                                                │
└─────────────────────────────────────────────────────────────────────────┘
• Статистика профиля
• Визуализация навыков (Bar Chart)
• Популярные интересы
• Количество match'ей, просмотров

КОНТЕКСТЫ:

AuthContext.js:
• Управление состоянием аутентификации
• login(), logout(), register()
• currentUser, token
• Проверка авторизации при загрузке

LanguageContext.js:
• Мультиязычность (EN, RU, DE)
• t() - функция перевода
• setLanguage() - переключение языка
• Хранение выбранного языка в localStorage

ПЕРЕВОДЫ:
translations.js содержит переводы для:
• Английский (en)
• Русский (ru)
• Немецкий (de)

Переключение языка в правом верхнем углу: 🇬🇧 🇷🇺 🇩🇪


═══════════════════════════════════════════════════════════════════════════
  8. БАЗА ДАННЫХ
═══════════════════════════════════════════════════════════════════════════

С DOCKER: PostgreSQL 15
БЕЗ DOCKER: SQLite

ТАБЛИЦЫ:

┌─────────────────────────────────────────────────────────────────────────┐
│ users - ПОЛЬЗОВАТЕЛИ                                                    │
└─────────────────────────────────────────────────────────────────────────┘
• id (Primary Key)
• email (Unique)
• hashed_password
• is_active
• created_at

┌─────────────────────────────────────────────────────────────────────────┐
│ profiles - ПРОФИЛИ                                                      │
└─────────────────────────────────────────────────────────────────────────┘
• id (Primary Key)
• user_id (Foreign Key -> users)
• first_name, last_name
• age, city
• bio (текстовое описание)
• search_goals (цели поиска)
• avatar_url
• is_profile_complete

┌─────────────────────────────────────────────────────────────────────────┐
│ interests - ИНТЕРЕСЫ                                                    │
└─────────────────────────────────────────────────────────────────────────┘
• id, name, category
• Many-to-Many связь с users через user_interests

┌─────────────────────────────────────────────────────────────────────────┐
│ skills - НАВЫКИ                                                         │
└─────────────────────────────────────────────────────────────────────────┘
• id, name, category
• Many-to-Many связь с users через user_skills

┌─────────────────────────────────────────────────────────────────────────┐
│ matches - ЛАЙКИ И MATCH'И                                               │
└─────────────────────────────────────────────────────────────────────────┘
• id
• user_id (кто поставил лайк)
• target_user_id (кому поставили)
• is_like (True/False)
• is_match (True если взаимный лайк)
• created_at

┌─────────────────────────────────────────────────────────────────────────┐
│ messages - СООБЩЕНИЯ                                                    │
└─────────────────────────────────────────────────────────────────────────┘
• id
• sender_id, receiver_id
• content (текст сообщения)
• created_at
• is_read

ИНИЦИАЛИЗАЦИЯ БД:

С Docker:
Автоматически при запуске через docker-entrypoint.sh -> init_db.py

Без Docker:
cd backend
export DATABASE_URL="sqlite:///./people_search.db"
python3 init_db.py

СОЗДАНИЕ ТЕСТОВЫХ ДАННЫХ:

С Docker:
Автоматически при первом запуске (10 пользователей)

Без Docker:
python3 create_10_test_users.py

МИГРАЦИИ:
Используется Alembic для миграций схемы БД.

Создать миграцию:
alembic revision --autogenerate -m "description"

Применить миграции:
alembic upgrade head


═══════════════════════════════════════════════════════════════════════════
  9. ТЕСТИРОВАНИЕ ФУНКЦИЙ
═══════════════════════════════════════════════════════════════════════════

После запуска приложения протестируйте все функции:

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГTAG 1: ВХОД В СИСТЕМУ                                                │
└─────────────────────────────────────────────────────────────────────────┘

1. Откройте http://localhost (или http://localhost:3000)
2. Нажмите "Login"
3. Введите:
   Email: john.doe@example.com
   Password: password123
4. Нажмите "Login"
5. ✅ Вы должны увидеть главную страницу с навигацией

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 2: ПРОСМОТР И РЕДАКТИРОВАНИЕ ПРОФИЛЯ                               │
└─────────────────────────────────────────────────────────────────────────┘

1. Нажмите "Profile" в меню
2. ✅ Должен открыться ваш профиль (John Doe)
3. ✅ Должны отображаться интересы и навыки
4. Попробуйте добавить новый интерес (введите "Reading")
5. ✅ Интерес должен добавиться в список
6. Попробуйте загрузить аватар (опционально)

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 3: РЕКОМЕНДАЦИИ С ML                                                │
└─────────────────────────────────────────────────────────────────────────┘

1. Нажмите "Recommendations" в меню
2. Выберите вкладку "Recommendations"
3. ✅ Должны отображаться карточки других пользователей
4. ✅ На каждой карточке процент совместимости
5. Найдите Jane Smith (должна быть в топе по совместимости)
6. Нажмите "View Profile" на её карточке

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 4: LIKE / DISLIKE                                                   │
└─────────────────────────────────────────────────────────────────────────┘

1. Находясь в профиле Jane Smith
2. ✅ Должны отображаться её интересы и навыки
3. ✅ Должен быть виден аватар (если загружен)
4. Нажмите кнопку "❤️ Like" внизу страницы
5. ✅ Должно появиться уведомление об успехе
6. ✅ НЕ должно быть ошибки "failed to like user"
7. Вернитесь назад и откройте профиль другого пользователя
8. Попробуйте нажать "👎 Dislike"
9. ✅ Должно работать без ошибок

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 5: ПОИСК С ФИЛЬТРАМИ (DISCOVER)                                     │
└─────────────────────────────────────────────────────────────────────────┘

1. Нажмите "Recommendations" -> вкладка "Discover"
2. Откройте фильтры (кнопка "Show Filters")
3. Введите ТОЛЬКО City: "Boston"
4. Оставьте остальные поля пустыми
5. Нажмите "Search"
6. ✅ Должна показаться Emma Davis (живет в Boston)
7. Попробуйте другой город: "Seattle"
8. ✅ Должен показаться Alex Brown

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 6: AI SEARCH                                                        │
└─────────────────────────────────────────────────────────────────────────┘

1. Нажмите "AI Search" в меню
2. В поле поиска введите: "Find developers in San Francisco"
3. Нажмите "Search"
4. ✅ Должен показаться John Doe (ваш профиль показывается для демонстрации)
5. Попробуйте другой запрос: "Find designers in New York"
6. ✅ Должна показаться Jane Smith
7. Попробуйте: "People interested in music"
8. ✅ Должен показаться Alex Brown (музыкант)
9. ✅ У каждого результата должен быть процент релевантности

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 7: СООБЩЕНИЯ                                                        │
└─────────────────────────────────────────────────────────────────────────┘

1. Нажмите "Messages" в меню
2. Если у вас есть match с кем-то:
   • ✅ Должен отображаться список чатов
   • Выберите чат
   • Отправьте сообщение
   • ✅ Сообщение должно появиться
3. Нажмите на аватар собеседника
4. ✅ Должен открыться профиль этого пользователя

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 8: АНАЛИТИКА                                                        │
└─────────────────────────────────────────────────────────────────────────┘

1. Нажмите "Analytics" в меню
2. ✅ Должна отображаться статистика:
   • Количество match'ей
   • Количество лайков
   • Процент заполнения профиля
3. ✅ Должен быть график навыков (Bar Chart)
4. ✅ Должны отображаться популярные интересы

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 9: МУЛЬТИЯЗЫЧНОСТЬ                                                  │
└─────────────────────────────────────────────────────────────────────────┘

1. В правом верхнем углу найдите переключатель языка
2. Нажмите на флаг 🇷🇺 (Русский)
3. ✅ Весь интерфейс должен перевестись на русский
4. Попробуйте 🇩🇪 (Немецкий)
5. ✅ Интерфейс должен перевестись на немецкий
6. Вернитесь на 🇬🇧 (English)

┌─────────────────────────────────────────────────────────────────────────┐
│ ШАГ 10: РЕГИСТРАЦИЯ НОВОГО ПОЛЬЗОВАТЕЛЯ                                │
└─────────────────────────────────────────────────────────────────────────┘

1. Выйдите (кнопка Logout)
2. Нажмите "Register"
3. Заполните форму:
   • Email: test@example.com
   • Password: test123
   • First Name: Test
   • Last Name: User
4. Нажмите "Register"
5. ✅ Должна произойти автоматическая авторизация
6. Заполните профиль полностью
7. Протестируйте все функции с новым пользователем


═══════════════════════════════════════════════════════════════════════════
  10. РЕШЕНИЕ ПРОБЛЕМ
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: Порт уже занят (address already in use)                      │
└─────────────────────────────────────────────────────────────────────────┘

РЕШЕНИЕ:
Используйте скрипт clean-and-start.sh - он автоматически освобождает порты

ИЛИ вручную:
sudo fuser -k 3000/tcp
sudo fuser -k 8000/tcp
sudo fuser -k 80/tcp
pkill -f react-scripts
pkill -f uvicorn

Затем запустите снова:
docker-compose up --build

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: permission denied ./docker-entrypoint.sh                     │
└─────────────────────────────────────────────────────────────────────────┘

РЕШЕНИЕ:
Dockerfile был исправлен. Пересоберите образы:
docker-compose down
docker-compose up --build

Если проблема остается:
chmod +x backend/docker-entrypoint.sh backend/init_db.py
docker-compose build --no-cache

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: Docker Compose ошибка 'ContainerConfig'                      │
└─────────────────────────────────────────────────────────────────────────┘

ПРИЧИНА: Старая версия docker-compose (1.29.2)

РЕШЕНИЕ 1: Используйте запуск без Docker
./simple-start.sh

РЕШЕНИЕ 2: Обновите Docker Compose
sudo apt-get remove docker-compose
sudo apt-get install docker-compose-plugin
docker compose version

Затем используйте "docker compose" (без дефиса):
docker compose up --build

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: Frontend не подключается к backend                           │
└─────────────────────────────────────────────────────────────────────────┘

ПРОВЕРКА:
1. Проверьте что backend работает:
   curl http://localhost:8000/docs

2. Проверьте переменную окружения в frontend:
   С Docker: REACT_APP_API_URL должна быть http://localhost:8000
   Без Docker: REACT_APP_API_URL=http://localhost:8001

3. Проверьте CORS настройки в backend/app/main.py

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: Пользователи не создаются автоматически                      │
└─────────────────────────────────────────────────────────────────────────┘

ПРОВЕРКА ЛОГОВ:
docker-compose logs backend | grep "Creating 10 test users"

РУЧНОЕ СОЗДАНИЕ:
docker exec -it people-search-platform22_backend_1 python3 create_10_test_users.py

БЕЗ DOCKER:
cd backend
export DATABASE_URL="sqlite:///./people_search.db"
python3 create_10_test_users.py

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: ModuleNotFoundError: No module named 'fastapi'               │
└─────────────────────────────────────────────────────────────────────────┘

РЕШЕНИЕ:
cd backend
pip3 install -r requirements.txt

Или используйте Docker - там все зависимости установлены автоматически

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: Database is locked (SQLite)                                  │
└─────────────────────────────────────────────────────────────────────────┘

ПРИЧИНА: Несколько процессов используют БД одновременно

РЕШЕНИЕ:
Остановите все процессы backend:
pkill -f uvicorn

Затем запустите снова:
./simple-start.sh

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: npm: command not found                                       │
└─────────────────────────────────────────────────────────────────────────┘

РЕШЕНИЕ:
Установите Node.js:
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs

Проверка:
node --version
npm --version

ИЛИ используйте Docker - там Node.js уже установлен

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: Avatar не отображается                                       │
└─────────────────────────────────────────────────────────────────────────┘

ПРОВЕРКА:
1. Файл должен быть в backend/uploads/avatars/
2. URL должен быть: http://localhost:8000/uploads/avatars/filename
3. Проверьте права на папку uploads:
   chmod -R 755 backend/uploads

┌─────────────────────────────────────────────────────────────────────────┐
│ ПРОБЛЕМА: Элементы не кликабельны (frontend)                           │
└─────────────────────────────────────────────────────────────────────────┘

РЕШЕНИЕ:
Очистите кеш браузера:
Ctrl+Shift+R (жесткая перезагрузка)

Или откройте в режиме инкогнито


═══════════════════════════════════════════════════════════════════════════
  11. КОМАНДЫ УПРАВЛЕНИЯ
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ DOCKER COMPOSE КОМАНДЫ                                                  │
└─────────────────────────────────────────────────────────────────────────┘

ЗАПУСК:
docker-compose up                    # Запуск в foreground
docker-compose up -d                 # Запуск в background
docker-compose up --build            # Пересборка и запуск

ОСТАНОВКА:
docker-compose down                  # Остановка и удаление контейнеров
docker-compose stop                  # Остановка без удаления
Ctrl+C                               # Остановка в foreground режиме

ПЕРЕЗАПУСК:
docker-compose restart               # Перезапуск всех сервисов
docker-compose restart backend       # Перезапуск только backend

ЛОГИ:
docker-compose logs                  # Все логи
docker-compose logs -f               # Следить за логами (tail -f)
docker-compose logs backend          # Логи только backend
docker-compose logs -f --tail=100 backend  # Последние 100 строк backend

ВЫПОЛНЕНИЕ КОМАНД В КОНТЕЙНЕРЕ:
docker-compose exec backend bash     # Войти в bash контейнера backend
docker-compose exec backend python3 create_10_test_users.py
docker-compose exec db psql -U user -d people_search  # Подключиться к БД

ПРОСМОТР СТАТУСА:
docker-compose ps                    # Список запущенных контейнеров
docker-compose top                   # Процессы в контейнерах

ОЧИСТКА:
docker-compose down -v               # Остановка + удаление volumes
docker system prune -a               # Очистка неиспользуемых образов

┌─────────────────────────────────────────────────────────────────────────┐
│ РАБОТА С БАЗОЙ ДАННЫХ                                                   │
└─────────────────────────────────────────────────────────────────────────┘

POSTGRESQL (Docker):
# Подключиться к БД
docker exec -it people-search-platform22_db_1 psql -U user -d people_search

# Полезные SQL команды:
\dt                  # Список таблиц
\d users             # Структура таблицы users
SELECT * FROM users; # Все пользователи
SELECT u.email, p.first_name, p.last_name, p.city 
FROM users u JOIN profiles p ON u.id = p.user_id;  # Пользователи с профилями
\q                   # Выход

SQLITE (без Docker):
# Подключиться к БД
cd backend
sqlite3 people_search.db

# Полезные SQL команды:
.tables              # Список таблиц
.schema users        # Структура таблицы users
SELECT * FROM users; # Все пользователи
.quit                # Выход

┌─────────────────────────────────────────────────────────────────────────┐
│ BACKEND КОМАНДЫ (без Docker)                                           │
└─────────────────────────────────────────────────────────────────────────┘

УСТАНОВКА ЗАВИСИМОСТЕЙ:
cd backend
pip3 install -r requirements.txt

ИНИЦИАЛИЗАЦИЯ БД:
export DATABASE_URL="sqlite:///./people_search.db"
python3 init_db.py

СОЗДАНИЕ ТЕСТОВЫХ ПОЛЬЗОВАТЕЛЕЙ:
python3 create_10_test_users.py

ЗАПУСК BACKEND:
uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

МИГРАЦИИ:
alembic revision --autogenerate -m "description"
alembic upgrade head
alembic downgrade -1

┌─────────────────────────────────────────────────────────────────────────┐
│ FRONTEND КОМАНДЫ (без Docker)                                          │
└─────────────────────────────────────────────────────────────────────────┘

УСТАНОВКА ЗАВИСИМОСТЕЙ:
cd frontend
npm install

ЗАПУСК FRONTEND:
REACT_APP_API_URL=http://localhost:8001 npm start

СБОРКА ДЛЯ PRODUCTION:
npm run build

ЛИНТИНГ:
npm run lint

┌─────────────────────────────────────────────────────────────────────────┐
│ СКРИПТЫ БЫСТРОГО ЗАПУСКА                                                │
└─────────────────────────────────────────────────────────────────────────┘

С DOCKER (рекомендуется):
./clean-and-start.sh
• Освобождает порты
• Останавливает старые контейнеры
• Запускает docker-compose up --build
• Создает 10 пользователей автоматически

БЕЗ DOCKER:
./simple-start.sh
• Запускает backend с SQLite на порту 8001
• Запускает frontend на порту 3000
• Логи сохраняются в backend.log и frontend.log

┌─────────────────────────────────────────────────────────────────────────┐
│ ПОЛЕЗНЫЕ КОМБИНАЦИИ                                                     │
└─────────────────────────────────────────────────────────────────────────┘

ПОЛНЫЙ РЕСТАРТ:
docker-compose down && docker-compose up --build

ПОСМОТРЕТЬ ЛОГИ BACKEND В РЕАЛЬНОМ ВРЕМЕНИ:
docker-compose logs -f backend | grep -E "(Created|Error|INFO)"

ОЧИСТКА И ПЕРЕЗАПУСК БД:
docker-compose down -v
docker-compose up --build
# Это пересоздаст БД и заново создаст пользователей

ПРОВЕРКА ЗДОРОВЬЯ СЕРВИСОВ:
curl http://localhost:8000/docs       # Backend API docs
curl http://localhost:3000             # Frontend
curl http://localhost:8000/api/interests  # Проверка API endpoint


═══════════════════════════════════════════════════════════════════════════
  🎉 ЗАКЛЮЧЕНИЕ
═══════════════════════════════════════════════════════════════════════════

ПРОЕКТ ПОЛНОСТЬЮ ГОТОВ К ИСПОЛЬЗОВАНИЮ!

✅ Все функции реализованы и протестированы
✅ Документация на русском языке
✅ Автоматическое создание тестовых пользователей
✅ Простые скрипты запуска
✅ Полная инструкция по тестированию
✅ Troubleshooting guide

БЫСТРЫЙ СТАРТ:
cd /home/"user"/Downloads/people-search-platform22
./clean-and-start.sh

Затем откройте: http://localhost
Войдите: john.doe@example.com / password123

ДОКУМЕНТАЦИЯ:
• ПОЛНОЕ_РУКОВОДСТВО.txt - полная документация на русском (этот файл)
• README.md - краткое описание проекта

ФАЙЛЫ ДЛЯ СОЗДАНИЯ ТЕСТОВЫХ ПОЛЬЗОВАТЕЛЕЙ:
• backend/init_db.py - инициализация БД (автоматически при Docker)
• backend/create_10_test_users.py - создание 10 пользователей (вручную)
• backend/docker-entrypoint.sh - Docker entrypoint

ОСНОВНЫЕ КОМПОНЕНТЫ:
• backend/ - FastAPI приложение
• frontend/ - React приложение
• docker-compose.yml - Docker конфигурация
• clean-and-start.sh - Запуск с Docker
• simple-start.sh - Запуск без Docker

🚀 ПРИЯТНОГО ИСПОЛЬЗОВАНИЯ!

Если возникнут вопросы или проблемы, обратитесь к разделу 10 
"РЕШЕНИЕ ПРОБЛЕМ" в этом файле.

═══════════════════════════════════════════════════════════════════════════

