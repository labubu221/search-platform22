{"ast":null,"code":"var _jsxFileName = \"/home/sigmar/Downloads/people-search-platform22/frontend/src/contexts/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { translations } from '../translations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const useLanguage = () => {\n  _s();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  const [language, setLanguage] = useState(() => {\n    // Get language from localStorage or default to English\n    return localStorage.getItem('language') || 'en';\n  });\n  useEffect(() => {\n    // Save language preference to localStorage\n    localStorage.setItem('language', language);\n  }, [language]);\n  const t = path => {\n    const keys = path.split('.');\n    let value = translations[language];\n    for (const key of keys) {\n      if (value && typeof value === 'object') {\n        value = value[key];\n      } else {\n        return path; // Return the path if translation not found\n      }\n    }\n    return value || path;\n  };\n  const changeLanguage = lang => {\n    if (translations[lang]) {\n      setLanguage(lang);\n    }\n  };\n  const value = {\n    language,\n    changeLanguage,\n    t,\n    availableLanguages: [{\n      code: 'en',\n      name: 'English',\n      flag: 'üá¨üáß'\n    }, {\n      code: 'de',\n      name: 'Deutsch',\n      flag: 'üá©üá™'\n    }, {\n      code: 'ru',\n      name: '–†—É—Å—Å–∫–∏–π',\n      flag: 'üá∑üá∫'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"BjiX6CqVRhoZR5QY6EYoi56Nkzs=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","translations","jsxDEV","_jsxDEV","LanguageContext","useLanguage","_s","context","Error","LanguageProvider","children","_s2","language","setLanguage","localStorage","getItem","setItem","t","path","keys","split","value","key","changeLanguage","lang","availableLanguages","code","name","flag","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sigmar/Downloads/people-search-platform22/frontend/src/contexts/LanguageContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { translations } from '../translations';\n\nconst LanguageContext = createContext();\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\nexport const LanguageProvider = ({ children }) => {\n  const [language, setLanguage] = useState(() => {\n    // Get language from localStorage or default to English\n    return localStorage.getItem('language') || 'en';\n  });\n\n  useEffect(() => {\n    // Save language preference to localStorage\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  const t = (path) => {\n    const keys = path.split('.');\n    let value = translations[language];\n    \n    for (const key of keys) {\n      if (value && typeof value === 'object') {\n        value = value[key];\n      } else {\n        return path; // Return the path if translation not found\n      }\n    }\n    \n    return value || path;\n  };\n\n  const changeLanguage = (lang) => {\n    if (translations[lang]) {\n      setLanguage(lang);\n    }\n  };\n\n  const value = {\n    language,\n    changeLanguage,\n    t,\n    availableLanguages: [\n      { code: 'en', name: 'English', flag: 'üá¨üáß' },\n      { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },\n      { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' }\n    ]\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,eAAe,gBAAGP,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMQ,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGR,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,WAAW;AAQxB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,MAAM;IAC7C;IACA,OAAOgB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI;EACjD,CAAC,CAAC;EAEFf,SAAS,CAAC,MAAM;IACd;IACAc,YAAY,CAACE,OAAO,CAAC,UAAU,EAAEJ,QAAQ,CAAC;EAC5C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMK,CAAC,GAAIC,IAAI,IAAK;IAClB,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;IAC5B,IAAIC,KAAK,GAAGpB,YAAY,CAACW,QAAQ,CAAC;IAElC,KAAK,MAAMU,GAAG,IAAIH,IAAI,EAAE;MACtB,IAAIE,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACtCA,KAAK,GAAGA,KAAK,CAACC,GAAG,CAAC;MACpB,CAAC,MAAM;QACL,OAAOJ,IAAI,CAAC,CAAC;MACf;IACF;IAEA,OAAOG,KAAK,IAAIH,IAAI;EACtB,CAAC;EAED,MAAMK,cAAc,GAAIC,IAAI,IAAK;IAC/B,IAAIvB,YAAY,CAACuB,IAAI,CAAC,EAAE;MACtBX,WAAW,CAACW,IAAI,CAAC;IACnB;EACF,CAAC;EAED,MAAMH,KAAK,GAAG;IACZT,QAAQ;IACRW,cAAc;IACdN,CAAC;IACDQ,kBAAkB,EAAE,CAClB;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAO,CAAC,EAC7C;MAAEF,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAO,CAAC,EAC7C;MAAEF,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAO,CAAC;EAEjD,CAAC;EAED,oBACEzB,OAAA,CAACC,eAAe,CAACyB,QAAQ;IAACR,KAAK,EAAEA,KAAM;IAAAX,QAAA,EACpCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACtB,GAAA,CAhDWF,gBAAgB;AAAAyB,EAAA,GAAhBzB,gBAAgB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}